{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { styles } from \"./styles\";\nimport { getRaceList, getWeatherTab, timeoutPromise, getWheelsList, getRaceDetails_by_ID } from \"./tools\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar AstridScreen = function (_React$Component) {\n  _inherits(AstridScreen, _React$Component);\n\n  var _super = _createSuper(AstridScreen);\n\n  function AstridScreen(props) {\n    var _this;\n\n    _classCallCheck(this, AstridScreen);\n\n    _this = _super.call(this, props);\n\n    _this.changeMain = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.goBack();\n    };\n\n    _this.getRaceID = function (event) {\n      console.log(event.target);\n      AsyncStorage.setItem(\"raceID\", event.target.value);\n      console.log(event.target.value);\n\n      _this.getWeatherData(event.target.value);\n    };\n\n    _this.state = {\n      dataRace: [],\n      raceID: 0,\n      raceList: [],\n      dataWeather: [],\n      listWheelStart: [],\n      RaceDetails: []\n    };\n    return _this;\n  }\n\n  _createClass(AstridScreen, [{\n    key: \"getRaceDetails\",\n    value: function getRaceDetails() {\n      var _this2 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getRaceDetails$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context.sent;\n              getRaceDetails_by_ID(accesstoken, raceID).then(function (liste) {\n                console.log(liste);\n\n                _this2.setState({\n                  RaceDetails: liste\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWheelsStart\",\n    value: function getWheelsStart() {\n      var _this3 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getWheelsStart$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context2.sent;\n              getWheelsList(accesstoken, raceID).then(function (liste) {\n                console.log(liste);\n\n                _this3.setState({\n                  listWheelStart: liste\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWeatherData\",\n    value: function getWeatherData(raceID) {\n      var _this4 = this;\n\n      var accesstoken;\n      return _regeneratorRuntime.async(function getWeatherData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context3.sent;\n              console.log(raceID);\n              getWeatherTab(accesstoken, raceID).then(function (DataTabular) {\n                console.log(DataTabular);\n\n                _this4.setState({\n                  dataWeather: DataTabular\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"renderTableData\",\n    value: function renderTableData() {\n      console.log(this.state.dataWeather);\n      return this.state.dataWeather.map(function (dataWeather, index) {\n        var temp_ground = dataWeather.temp_ground,\n            temp_air = dataWeather.temp_air,\n            datetime = dataWeather.datetime,\n            weather_des = dataWeather.weather_des;\n        return React.createElement(\"tr\", {\n          key: datetime\n        }, React.createElement(\"td\", null, datetime), React.createElement(\"td\", null, temp_ground), React.createElement(\"td\", null, temp_air), React.createElement(\"td\", null, weather_des));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var optionTemplate = this.state.raceList.map(function (v) {\n        return React.createElement(\"option\", {\n          value: v.id,\n          key: v.id\n        }, v.name);\n      });\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(Text, {\n        style: styles.textStyles\n      }, \"24 Stunden Rennen\"), React.createElement(\"label\", null, \"W\\xE4hle das gew\\xFCnschte Rennen aus:\", React.createElement(\"select\", {\n        value: this.state.id,\n        onChange: this.getRaceID\n      }, optionTemplate)), React.createElement(\"div\", null, React.createElement(\"h1\", {\n        id: \"title\"\n      }, \"Tabelle Wetter\"), React.createElement(\"table\", {\n        id: \"dataWeather\"\n      }, React.createElement(\"tbody\", null, this.renderTableData()))), React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeMain\n      }));\n    }\n  }]);\n\n  return AstridScreen;\n}(React.Component);\n\nexport { AstridScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/example_Astrid.js"],"names":["React","styles","getRaceList","getWeatherTab","timeoutPromise","getWheelsList","getRaceDetails_by_ID","AsyncStorage","Icon","AstridScreen","props","changeMain","event","preventDefault","navigation","goBack","getRaceID","console","log","target","setItem","value","getWeatherData","state","dataRace","raceID","raceList","dataWeather","listWheelStart","RaceDetails","getItem","accesstoken","then","liste","setState","catch","error","DataTabular","map","index","temp_ground","temp_air","datetime","weather_des","optionTemplate","v","id","name","viewStyles","textStyles","renderTableData","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity\n} from 'react-native';\nimport {styles} from \"./styles\"\nimport {getRaceList, getWeatherTab, timeoutPromise,getWheelsList,getRaceDetails_by_ID} from \"./tools\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {Button} from \"react-native-web\";\n\nexport default class AstridScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataRace: [],\n            raceID :0,\n            raceList:[],\n            dataWeather: [],\n            listWheelStart:[],\n            RaceDetails:[],\n        }\n    }\n\n    // navigate to Main Menue\n    changeMain = event => {\n        event.preventDefault();\n        this.props.navigation.goBack();\n    }\n\n    // save RaceID to AsyncStorage, with AsyncStorage.getItem(\"raceID_Example\") you get this ID\n    // afterwards get WeatherData of this Race and\n    //WeatherData is now in this.state.dataWeather\n     getRaceID = event =>{\n        console.log(event.target)\n        AsyncStorage.setItem(\"raceID\",event.target.value);\n        //const id = await AsyncStorage.getItem(\"raceID_Example\");\n        console.log(event.target.value);\n        this.getWeatherData(event.target.value);\n    }\n\n\n    //get RaceDetails by RaceID\n    async getRaceDetails(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        getRaceDetails_by_ID(accesstoken,raceID).then(liste => {\n            console.log(liste);\n            this.setState({RaceDetails: liste});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    //get ReifenData\n    async getWheelsStart(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        getWheelsList(accesstoken,raceID).then(liste => {\n            console.log(liste);\n            this.setState({listWheelStart: liste});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n\n    //get Weather Data, it will be used in getRaceID\n    async getWeatherData(raceID){\n       const accesstoken = await AsyncStorage.getItem('accesstoken');\n       //const raceID = await AsyncStorage.getItem('raceID');\n       console.log(raceID)\n       getWeatherTab(accesstoken, raceID).then(DataTabular => {\n                console.log(DataTabular);\n                this.setState({dataWeather: DataTabular});\n            }).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n\n    //Tabular Weather Data\n    renderTableData() {\n        console.log(this.state.dataWeather)\n        return this.state.dataWeather.map((dataWeather, index) => {\n            const { temp_ground,temp_air,datetime,weather_des } =dataWeather //destructuring\n            return (\n            <tr key={datetime}>\n               <td>{datetime}</td>\n               <td>{temp_ground}</td>\n                <td>{temp_air}</td>\n                <td>{weather_des}</td>\n            </tr>\n         )\n      })\n   }\n\n\n    render() {\n        let optionTemplate = this.state.raceList.map(v => (\n            <option value={v.id} key={v.id}>{v.name}</option>\n        ));\n        return (\n            <View style={styles.viewStyles}>\n                <Text style={styles.textStyles}>\n                    24 Stunden Rennen\n                </Text>\n\n                <label>\n                Wähle das gewünschte Rennen aus:\n                <select value={this.state.id} onChange={this.getRaceID}>\n                  {optionTemplate}\n                </select>\n                </label>\n\n                <div>\n                <h1 id='title'>Tabelle Wetter</h1>\n                <table id='dataWeather'>\n                   <tbody>\n                      {this.renderTableData()}\n                   </tbody>\n                </table>\n                </div>\n\n                <Button\n                    title=\"zurück\"\n                    onPress={this.changeMain}\n                />\n\n            </View>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}