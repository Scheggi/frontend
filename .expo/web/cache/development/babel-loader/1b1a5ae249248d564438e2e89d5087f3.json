{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { styles } from \"./styles\";\nimport { getRaceList, getWeatherTab, timeoutPromise, getWheelsList, getRaceDetails_by_ID } from \"./tools\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar WheelScreen = function (_React$Component) {\n  _inherits(WheelScreen, _React$Component);\n\n  var _super = _createSuper(WheelScreen);\n\n  function WheelScreen(props) {\n    var _this;\n\n    _classCallCheck(this, WheelScreen);\n\n    _this = _super.call(this, props);\n\n    _this.changeMain = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.goBack();\n    };\n\n    _this.state = {\n      dataRace: [],\n      raceID: 0,\n      raceList: [],\n      dataWeather: [],\n      listWheelStart: [],\n      RaceDetails: []\n    };\n    return _this;\n  }\n\n  _createClass(WheelScreen, [{\n    key: \"getRaceDetails\",\n    value: function getRaceDetails() {\n      var _this2 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getRaceDetails$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context.sent;\n              getRaceDetails_by_ID(accesstoken, raceID).then(function (liste) {\n                console.log(liste);\n\n                _this2.setState({\n                  RaceDetails: liste\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getWheelsStart\",\n    value: function getWheelsStart() {\n      var _this3 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function getWheelsStart$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('raceID'));\n\n            case 5:\n              raceID = _context2.sent;\n              getWheelsList(accesstoken, raceID).then(function (liste) {\n                console.log(liste);\n\n                _this3.setState({\n                  listWheelStart: liste\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var optionTemplate = this.state.raceList.map(function (v) {\n        return React.createElement(\"option\", {\n          value: v.id,\n          key: v.id\n        }, v.name);\n      });\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(Text, {\n        style: styles.textStyles\n      }, \"24 Stunden Rennen\"), React.createElement(\"div\", null, React.createElement(\"h1\", {\n        id: \"title\"\n      }, \"Tabelle Wetter\"), React.createElement(\"table\", {\n        id: \"dataWeather\"\n      }, React.createElement(\"tbody\", null, this.renderTableData()))), React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeMain\n      }));\n    }\n  }]);\n\n  return WheelScreen;\n}(React.Component);\n\nexport { WheelScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/Reifenmanagement.js"],"names":["React","styles","getRaceList","getWeatherTab","timeoutPromise","getWheelsList","getRaceDetails_by_ID","AsyncStorage","Icon","WheelScreen","props","changeMain","event","preventDefault","navigation","goBack","state","dataRace","raceID","raceList","dataWeather","listWheelStart","RaceDetails","getItem","accesstoken","then","liste","console","log","setState","catch","error","optionTemplate","map","v","id","name","viewStyles","textStyles","renderTableData","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity\n} from 'react-native';\nimport {styles} from \"./styles\"\nimport {getRaceList, getWeatherTab, timeoutPromise,getWheelsList,getRaceDetails_by_ID} from \"./tools\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {Button} from \"react-native-web\";\n\nexport default class WheelScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataRace: [],\n            raceID :0,\n            raceList:[],\n            dataWeather: [],\n            listWheelStart:[],\n            RaceDetails:[],\n        }\n    }\n\n    // navigate to Main Menue\n    changeMain = event => {\n        event.preventDefault();\n        this.props.navigation.goBack();\n    }\n\n    \n    //get RaceDetails by RaceID\n    async getRaceDetails(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        getRaceDetails_by_ID(accesstoken,raceID).then(liste => {\n            console.log(liste);\n            this.setState({RaceDetails: liste});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    //get ReifenData\n    async getWheelsStart(){\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        getWheelsList(accesstoken,raceID).then(liste => {\n            console.log(liste);\n            this.setState({listWheelStart: liste});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n\n    \n\n    render() {\n        let optionTemplate = this.state.raceList.map(v => (\n            <option value={v.id} key={v.id}>{v.name}</option>\n        ));\n        return (\n            <View style={styles.viewStyles}>\n                <Text style={styles.textStyles}>\n                    24 Stunden Rennen\n                </Text>\n\n                \n\n                <div>\n                <h1 id='title'>Tabelle Wetter</h1>\n                <table id='dataWeather'>\n                   <tbody>\n                      {this.renderTableData()}\n                   </tbody>\n                </table>\n                </div>\n\n                <Button\n                    title=\"zurück\"\n                    onPress={this.changeMain}\n                />\n\n            </View>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}