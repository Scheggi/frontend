{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { styles } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { timeoutPromise, getWeatherTab, refreshToken, getRaceList } from \"./tools\";\n\nvar NewHelpScreen = function (_React$Component) {\n  _inherits(NewHelpScreen, _React$Component);\n\n  var _super = _createSuper(NewHelpScreen);\n\n  function NewHelpScreen(props) {\n    var _this;\n\n    _classCallCheck(this, NewHelpScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getRaceID = function (event) {\n      var id = event.target.value;\n      AsyncStorage.setItem(\"raceID\", event.target.value);\n\n      _this.saveRaceIDinState();\n    };\n\n    _this.changeLogout = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.replace('Logout');\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.sendNewWeatherRequest(_this.state.temp_air, _this.state.temp_ground, _this.state.weather_des);\n    };\n\n    _this.state = {\n      temp_ground: 0.0,\n      temp_air: 0.0,\n      weather_des: \"\",\n      datetime: \"\",\n      raceList: [],\n      dataWeather: [],\n      time: {},\n      seconds: 1800,\n      raceid: 0\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(NewHelpScreen, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours = Math.floor(secs / (60 * 60));\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n      var obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      });\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"saveRaceIDinState\",\n    value: function saveRaceIDinState() {\n      var id;\n      return _regeneratorRuntime.async(function saveRaceIDinState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"raceID\"));\n\n            case 2:\n              id = _context.sent;\n              this.setState({\n                raceid: id\n              });\n              console.log(this.state.raceid);\n              this.getWeatherData(id);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getWeatherData\",\n    value: function getWeatherData(raceID) {\n      var _this2 = this;\n\n      var accesstoken;\n      return _regeneratorRuntime.async(function getWeatherData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context2.sent;\n              console.log(raceID);\n              console.log(accesstoken);\n              getWeatherTab(accesstoken, raceID).then(function (DataTabular) {\n                console.log(DataTabular);\n\n                _this2.setState({\n                  dataWeather: DataTabular\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      var timeLeftVar, accesstoken;\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              timeLeftVar = this.secondsToTime(this.state.seconds);\n              this.setState({\n                time: timeLeftVar\n              });\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 4:\n              accesstoken = _context3.sent;\n              getRaceList(accesstoken).then(function (racelistDropdown) {\n                console.log(racelistDropdown);\n\n                _this3.setState({\n                  raceList: racelistDropdown\n                });\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      return this.state.weather_des.length > 0 && this.state.raceid != 0;\n    }\n  }, {\n    key: \"sendNewWeatherRequest\",\n    value: function sendNewWeatherRequest(temp_air, temp_ground, weather_des) {\n      var id;\n      return _regeneratorRuntime.async(function sendNewWeatherRequest$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(temp_air);\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"raceID\"));\n\n            case 3:\n              id = _context4.sent;\n              timeoutPromise(2000, fetch('https://api.race24.cloud/user/weather/create', {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  raceID: id,\n                  temp_air: parseFloat(temp_air),\n                  temp_ground: parseFloat(temp_ground),\n                  weather_des: weather_des\n                })\n              })).then(function (response) {\n                return response.json();\n              }).then(console.log(\"success\")).catch(function (error) {\n                console.log(error);\n              });\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var optionTemplate = this.state.raceList.map(function (v) {\n        return React.createElement(\"option\", {\n          value: v.id,\n          key: v.id\n        }, v.name);\n      });\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(Text, {\n        style: styles.textStyles\n      }, \"24 Stunden Rennen\"), React.createElement(\"label\", null, \"W\\xE4hle das gew\\xFCnschte Rennen aus:\", React.createElement(\"select\", {\n        value: this.state.id,\n        onChange: this.getRaceID\n      }, optionTemplate)), React.createElement(\"div\", null, React.createElement(\"button\", {\n        onClick: this.startTimer\n      }, \"Start\"), \"m: \", this.state.time.m, \" s: \", this.state.time.s), React.createElement(View, null, React.createElement(Text, null, \"Temperatur des Bodens angeben: \"), React.createElement(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \" xx.xxxx\",\n        onChangeText: function onChangeText(text) {\n          return _this4.setState({\n            temp_ground: parseFloat(text.trim())\n          });\n        }\n      }), React.createElement(Text, null, \"Temperatur der Luft angeben: \"), React.createElement(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \" xx.xxxx\",\n        onChangeText: function onChangeText(text) {\n          return _this4.setState({\n            temp_air: parseFloat(text.trim())\n          });\n        }\n      }), React.createElement(Text, null, \" Wetter Beschreibung angeben: \"), React.createElement(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \" bewoelkt\",\n        onChangeText: function onChangeText(text) {\n          return _this4.setState({\n            weather_des: text\n          });\n        }\n      }), React.createElement(Button, {\n        disabled: !this.validateForm(),\n        title: \"Neues Datenset anlegen\",\n        onPress: this.handleSubmit\n      }), React.createElement(Button, {\n        title: \"Logout\",\n        onPress: this.changeLogout\n      })));\n    }\n  }]);\n\n  return NewHelpScreen;\n}(React.Component);\n\nexport { NewHelpScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/HelperScreen.js"],"names":["React","styles","AsyncStorage","timeoutPromise","getWeatherTab","refreshToken","getRaceList","NewHelpScreen","props","getRaceID","event","id","target","value","setItem","saveRaceIDinState","changeLogout","preventDefault","navigation","replace","handleSubmit","sendNewWeatherRequest","state","temp_air","temp_ground","weather_des","datetime","raceList","dataWeather","time","seconds","raceid","timer","startTimer","bind","countDown","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","setInterval","setState","secondsToTime","clearInterval","getItem","console","log","getWeatherData","raceID","accesstoken","then","DataTabular","catch","error","timeLeftVar","racelistDropdown","length","fetch","method","headers","body","JSON","stringify","parseFloat","response","json","optionTemplate","map","v","name","viewStyles","textStyles","m","s","height","text","trim","validateForm","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    View,\n    Text,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity\n} from 'react-native';\nimport {styles} from \"./styles\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {Button} from \"react-native-web\";\n//import {Button, Text, TextInput, ToastAndroid, View} from \"react-native\";\n\nimport {timeoutPromise,getWeatherTab, refreshToken,getRaceList} from \"./tools\";\n\nexport default class NewHelpScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            temp_ground: 0.0,\n            temp_air: 0.0,\n            weather_des: \"\",\n            datetime: \"\",\n            raceList: [],\n            dataWeather: [],\n            time: {},\n            seconds: 1800,\n            raceid:0,\n        }\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n        let obj = {\n          \"h\": hours,\n          \"m\": minutes,\n          \"s\": seconds\n        };\n        return obj;\n    }\n\n    startTimer() {\n        if (this.timer == 0 && this.state.seconds > 0) {\n            this.timer = setInterval(this.countDown, 1000);\n            }\n    }\n    countDown() {\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds,\n            });\n        // Check if  zero.\n      if (seconds == 0) {\n          clearInterval(this.timer);\n          }\n      }\n\n\n\n    async saveRaceIDinState(){\n        const id = await AsyncStorage.getItem(\"raceID\");\n        this.setState({raceid : id} );\n        console.log(this.state.raceid);\n        this.getWeatherData(id);\n    }\n\n     getRaceID = event =>{\n        const id = event.target.value;\n        AsyncStorage.setItem(\"raceID\",event.target.value);\n        this.saveRaceIDinState();\n    }\n\n    async getWeatherData(raceID){\n       const accesstoken = await AsyncStorage.getItem('accesstoken');\n       //const raceID = await AsyncStorage.getItem('raceID');\n       console.log(raceID);\n       console.log(accesstoken);\n       getWeatherTab(accesstoken, raceID).then(DataTabular => {\n                console.log(DataTabular);\n                this.setState({dataWeather: DataTabular});\n            }).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    async componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({ time: timeLeftVar });\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        getRaceList(accesstoken).then(racelistDropdown => {\n            console.log(racelistDropdown);\n            this.setState({raceList: racelistDropdown});\n        }).catch(function (error) {\n            console.log(error);\n        });\n        }\n\n\n    changeLogout = event => {\n        event.preventDefault();\n        this.props.navigation.replace('Logout');\n    }\n\n\n    validateForm() {\n        return this.state.weather_des.length > 0 && this.state.raceid != 0 ;\n    }\n    handleSubmit = event => {\n        event.preventDefault();\n        this.sendNewWeatherRequest(this.state.temp_air,this.state.temp_ground,\n            this.state.weather_des);\n    }\n\n\n    async sendNewWeatherRequest(temp_air,temp_ground,weather_des) {\n        console.log(temp_air)\n        const id = await AsyncStorage.getItem(\"raceID\");\n       timeoutPromise(2000, fetch(\n            'https://api.race24.cloud/user/weather/create', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    raceID:id,\n                    temp_air: parseFloat(temp_air),\n                    temp_ground: parseFloat(temp_ground),\n                    weather_des: weather_des,\n                })\n            })\n            ).then(response => response.json()).then(\n                console.log(\"success\")\n                ).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n\n    render() {\n        let optionTemplate = this.state.raceList.map(v => (\n            <option value={v.id} key={v.id}>{v.name}</option>\n    ));\n        return (\n            <View style={styles.viewStyles}>\n                <Text style={styles.textStyles}>\n                    24 Stunden Rennen\n                </Text>\n                <label>\n                Wähle das gewünschte Rennen aus:\n                <select value={this.state.id} onChange={this.getRaceID}>\n                  {optionTemplate}\n                </select>\n                </label>\n\n                <div>\n                    <button onClick={this.startTimer}>Start</button>\n                    m: {this.state.time.m} s: {this.state.time.s}\n                 </div>\n\n\n\n                <View >\n                    <Text >Temperatur des Bodens angeben: </Text>\n                    <TextInput\n                        style={{height:60 }}\n                        placeholder=\" xx.xxxx\"\n                        onChangeText={(text) => this.setState({ temp_ground:parseFloat(text.trim())})}\n                    />\n                    <Text>Temperatur der Luft angeben: </Text>\n                    <TextInput\n                        style={{height: 60}}\n                        placeholder=\" xx.xxxx\"\n                        onChangeText={(text) => this.setState({temp_air:parseFloat(text.trim())})}\n                    />\n                    <Text> Wetter Beschreibung angeben: </Text>\n                    <TextInput\n                        style={{height: 60}}\n                        placeholder=\" bewoelkt\"\n                        onChangeText={(text) => this.setState({weather_des:text})}\n                    />\n                    <Button\n                        disabled={!this.validateForm()}\n                        title=\"Neues Datenset anlegen\"\n                        onPress={this.handleSubmit}\n                    />\n\n                    <Button\n                    title=\"Logout\"\n                    onPress={this.changeLogout}\n                    />\n\n                </View>\n\n            </View>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}