{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { styles } from \"./styles\";\nimport { getRaceList, getWeatherTab, timeoutPromise, TableNiklas } from \"./tools\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar IngenieurScreen = function (_React$Component) {\n  _inherits(IngenieurScreen, _React$Component);\n\n  var _super = _createSuper(IngenieurScreen);\n\n  function IngenieurScreen(props) {\n    var _this;\n\n    _classCallCheck(this, IngenieurScreen);\n\n    _this = _super.call(this, props);\n\n    _this.changeMain = function (event) {\n      event.preventDefault();\n\n      _this.props.navigation.goBack();\n    };\n\n    _this.state = {\n      dataRace: [],\n      raceID: 0,\n      raceList: [],\n      dataWeather: [],\n      list_formel: [],\n      formel: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(IngenieurScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var accesstoken, raceID;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('accesstoken'));\n\n            case 2:\n              accesstoken = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"raceID\"));\n\n            case 5:\n              raceID = _context.sent;\n              getWeatherTab(accesstoken, raceID).then(function (DataTabular) {\n                console.log(DataTabular);\n\n                _this2.setState({\n                  dataWeather: DataTabular\n                });\n\n                AsyncStorage.setItem(\"WeatherList\", DataTabular);\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"renderTableHeader\",\n    value: function renderTableHeader() {\n      var weatherList, header;\n      return _regeneratorRuntime.async(function renderTableHeader$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"WeatherList\"));\n\n            case 2:\n              weatherList = _context2.sent;\n\n              if (!(weatherList != null)) {\n                _context2.next = 9;\n                break;\n              }\n\n              console.log(weatherList);\n              header = Object.keys(weatherList);\n              return _context2.abrupt(\"return\", header.map(function (key, index) {\n                return React.createElement(\"th\", {\n                  key: index\n                }, key.toUpperCase());\n              }));\n\n            case 9:\n              return _context2.abrupt(\"return\", []);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"renderTableData\",\n    value: function renderTableData() {\n      var weatherList;\n      return _regeneratorRuntime.async(function renderTableData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"WeatherList\"));\n\n            case 2:\n              weatherList = _context3.sent;\n\n              if (!(weatherList != null)) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", weatherList.map(function (dataWeather, index) {\n                var _singledata = singledata,\n                    datetime = _singledata.datetime,\n                    temp_ground = _singledata.temp_ground,\n                    temp_air = _singledata.temp_air,\n                    weather_des = _singledata.weather_des;\n                return React.createElement(\"tr\", {\n                  key: datetime\n                }, React.createElement(\"td\", null, datetime), React.createElement(\"td\", null, temp_ground), React.createElement(\"td\", null, temp_air), React.createElement(\"td\", null, weather_des));\n              }));\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.viewStyles\n      }, React.createElement(Text, {\n        style: styles.textStyles\n      }, \"24 Stunden Rennen\"), React.createElement(Text, null, \"Test\"), React.createElement(\"div\", null, React.createElement(\"h1\", {\n        id: \"title\"\n      }, \"Tabelle Wetter\"), React.createElement(\"table\", {\n        id: \"dataWeather\"\n      }, React.createElement(\"tbody\", null, React.createElement(\"tr\", null, this.renderTableHeader()), this.renderTableData()))), React.createElement(Button, {\n        title: \"zur\\xFCck\",\n        onPress: this.changeMain\n      }));\n    }\n  }]);\n\n  return IngenieurScreen;\n}(React.Component);\n\nexport { IngenieurScreen as default };","map":{"version":3,"sources":["/home/toni/PycharmProjects/PropraSource/frontend/IngenieurScreen.js"],"names":["React","styles","getRaceList","getWeatherTab","timeoutPromise","TableNiklas","AsyncStorage","Icon","IngenieurScreen","props","changeMain","event","preventDefault","navigation","goBack","state","dataRace","raceID","raceList","dataWeather","list_formel","formel","getItem","accesstoken","then","DataTabular","console","log","setState","setItem","catch","error","weatherList","header","Object","keys","map","key","index","toUpperCase","singledata","datetime","temp_ground","temp_air","weather_des","viewStyles","textStyles","renderTableHeader","renderTableData","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity\n} from 'react-native';\nimport {styles} from \"./styles\"\nimport {getRaceList, getWeatherTab, timeoutPromise,TableNiklas} from \"./tools\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {Button} from \"react-native-web\";\n\nexport default class IngenieurScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataRace: [],\n            raceID :0,\n            raceList:[],\n            dataWeather: [],\n            list_formel:[],\n            formel:\"\",\n\n        }\n    }\n\n    //get RaceList\n    async componentDidMount() {\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem(\"raceID\");\n        getWeatherTab(accesstoken, raceID).then(DataTabular => {\n                console.log(DataTabular);\n                this.setState({dataWeather: DataTabular});\n                AsyncStorage.setItem(\"WeatherList\",DataTabular);\n            }).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    // navigate to Main Menue\n    changeMain = event => {\n        event.preventDefault();\n        this.props.navigation.goBack();\n    }\n    \n    async renderTableHeader() {\n        let weatherList = await AsyncStorage.getItem(\"WeatherList\")\n        if (weatherList !=null){\n        console.log(weatherList)\n        let header = Object.keys(weatherList)\n        return header.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n      })}\n        else{\n            return [];\n        }\n   }\n\n    //Tabular Weather Data\n    async renderTableData() {\n        let weatherList = await AsyncStorage.getItem(\"WeatherList\")\n        if (weatherList != null){\n        return weatherList.map((dataWeather, index) => {\n            const {datetime,temp_ground,temp_air,weather_des} = singledata\n            return (\n            <tr key={datetime}>\n               <td>{datetime}</td>\n               <td>{temp_ground}</td>\n                <td>{temp_air}</td>\n                <td>{weather_des}</td>\n            </tr>\n         )\n      })}\n\n   }\n\n\n    render() {\n        return (\n            <View style={styles.viewStyles}>\n                <Text style={styles.textStyles}>\n                    24 Stunden Rennen\n                </Text>\n\n\n                <Text>\n                    Test\n                </Text>\n\n\n                <div>\n                <h1 id='title'>Tabelle Wetter</h1>\n                <table id='dataWeather'>\n                   <tbody>\n                       <tr>{this.renderTableHeader()}</tr>\n                  {this.renderTableData()}\n                   </tbody>\n                </table>\n                </div>\n\n                <Button\n                    title=\"zurück\"\n                    onPress={this.changeMain}\n                />\n\n            </View>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}