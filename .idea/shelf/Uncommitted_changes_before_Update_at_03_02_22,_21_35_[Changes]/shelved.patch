Index: NewOrder.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\nimport {Button, Text, TextInput, ToastAndroid,ScrollView, View} from \"react-native\";\nimport {styles} from \"./styles\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport {timeoutPromise, refreshToken,getRaceList,changeWheelSet} from \"./tools\";\nimport {get_Dict_WheelOrder, getDropdown,getWheelSetInformation,getOrderDropdown,getWheelInformations} from \"./tools_get_wheels\";\nimport {changeSetData,changeTimer} from \"./tools_wheel\"\nimport image from \"./logo.png\";\n\nexport default class NewOrderScreen extends React.Component {\n   constructor(props) {\n        super(props);\n        this.state = {\n            setID:0,\n            raceID :0,\n            setData:[],\n            list_wheels : [],\n            dropdownlist : [[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]]],\n            ButtonsList : ['Slicks Cold','Slicks Medium', 'Slicks Hot', 'Inters Intermediate', 'Rain DryWet', 'Rain HeavyWet'],\n        }\n    }\n\n\n    async getGroup(){\n         const group = await AsyncStorage.getItem(\"usergroup\");\n         console.log(group)\n        if (group===\"Helper\"){\n            this.props.navigation.push(\"HelperNavigator\")\n        }\n        if (group===\"Ingenieur\"){\n            this.props.navigation.push(\"Nav\")\n        }\n        if (group===\"Manager\"){\n            this.props.navigation.push(\"Race\")\n        }\n    }\n\n    changeRace = event => {\n        event.preventDefault();\n        this.getGroup();\n    }\n\n        changeLogout = event => {\n        event.preventDefault();\n        this.props.navigation.replace('Logout');\n    }\n\n     changeNewUser = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewUser');\n    }\n\n    changeWheel = event => {\n        event.preventDefault();\n        this.props.navigation.push('Wheel');\n    }\n\n    changeWeather = event => {\n        event.preventDefault();\n        this.props.navigation.push('Weather');\n    }\n\n    changeShowRace = event => {\n        event.preventDefault();\n        this.props.navigation.push('ShowRace');\n    }\n\n     changeNewRace = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewRace');\n    }\n\n    changeNewFormel = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewFormel');\n    }\n\n    changeAstrid = event => {\n        event.preventDefault();\n        this.props.navigation.push('Astrid');\n    }\n\n    changeMaen = event => {\n        event.preventDefault();\n        this.props.navigation.push('Maen');\n    }\n\n    changeHelper = event => {\n        event.preventDefault();\n        this.props.navigation.push('Helper')\n    }\n\n     async getTabularData() {\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        this.setState({raceID:raceID})\n        await getWheelInformations(accesstoken, raceID).then(Tab => {\n            this.setState({list_wheels: Tab});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    async getDropdownData() {\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceID = await AsyncStorage.getItem('raceID');\n        await getOrderDropdown(accesstoken, raceID).then(Tab => {\n            this.setState({dropdownlist: Tab});\n        }).catch(function (error) {\n            console.log(error);\n        })\n    };\n\n\n    handle_choosen_order = event =>{\n        console.log(event)\n        let copyArray = []\n        this.setState({setID:event.value})\n       this.state.list_wheels.forEach( function (element,index){if(element.setid==event.value){copyArray=[element]}});\n        console.log(copyArray)\n        copyArray[0]['status']='order';\n        this.setState({setData:copyArray});\n        console.log(this.state.setData);\n    };\n\n    change_state_in_tabular_set = event =>{\n       let copyArray = this.state.setData;\n        this.state.setData.forEach( function (element,index){copyArray[index][event.target.name]=event.target.value});\n        this.setState({setData:copyArray});\n    };\n\n     async componentDidMount(){\n        await this.getTabularData();\n        console.log(this.state.list_wheels)\n        await this.getDropdownData();\n        console.log(this.state.dropdownlist)\n    }\n\n    save_order = event =>{\n         changeSetData(this.state.setData[0])\n        var duration = 0;\n        this.state.setData.forEach( function (element,index){if(element.order_duration != null){duration =element.order_duration}});\n        console.log(parseInt(duration));\n        changeTimer(this.state.raceID,[['order_duration',parseInt(duration)]]);\n        this.changeRace();\n    }\n      // end save change\n\n\n     renderTableHeader(number) {\n         let header = ['Slicks Cold', 'Slicks Medium', 'Slicks Hot', 'Inters Intermediate', 'Rain DryWet', 'Rain HeavyWet'];\n         let headerOrder = ['Art', 'Bestellung', 'Dauer', 'Status'];\n         let headerOrder2 = ['Kaltdruck', 'Bleed', 'Heizdaten', 'Warmdruck', 'Target Warmdruck', 'Bleed', 'Reifen ID'];\n         if (number ==1){\n             return header.map((key, index) => {\n                 return <th style={{backgroundColor: '#72869d', textAlign: 'center', verticalAlign: 'middle', fontSize: 'bold'}}\n                            key={index}>{key.toUpperCase()}</th>\n             })\n         }\n         if (number ==2){\n             return headerOrder.map((key, index) => {\n                 return <th style={{backgroundColor: '#72869d', textAlign: 'center', verticalAlign: 'middle', fontSize: 'bold'}}\n                            key={index}>{key.toUpperCase()}</th>\n             })\n         }\n         if (number ==3){\n             return headerOrder2.map((key, index) => {\n                 return <th style={{backgroundColor: '#72869d', textAlign: 'center', verticalAlign: 'middle', fontSize: 'bold'}}\n                            key={index}>{key.toUpperCase()}</th>\n             })\n         }\n     }\n\n     renderTableHeaderChoosen() {\n         let header = ['Slicks Cold', 'Slicks Medium', 'Slicks Hot', 'Inters Intermediate', 'Rain DryWet', 'Rain HeavyWet'];\n         return header.map((key, index) => {\n             return <th style={{backgroundColor: '#72869d', textAlign: 'center', verticalAlign: 'middle', fontSize: 'bold'}}\n                        key={index}>{key.toUpperCase()}</th>\n         })\n     }\n\n     renderTableOrderCat1(){\n       const optiondropdown1 = this.state.dropdownlist[0][0]\n       const optiondropdown2 = this.state.dropdownlist[1][0]\n       const optiondropdown3 = this.state.dropdownlist[2][0]\n       const optiondropdown4 = this.state.dropdownlist[3][0]\n       const optiondropdown5 = this.state.dropdownlist[4][0]\n       const optiondropdown6 = this.state.dropdownlist[5][0]\n       const coloumns = ['all'];\n       return coloumns.map((buttons, index) => {\n            return (\n                <tr key={'1Tabelle'}>\n                    <td>\n                    <Dropdown options={optiondropdown1} onChange={this.handle_choosen_order} id ={optiondropdown1.id} value={optiondropdown1.name} placeholder=\"Alle Sets\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown2} onChange={this.handle_choosen_order} id ={optiondropdown2.id} value={optiondropdown2.name} placeholder=\"Alle Sets\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown3} onChange={this.handle_choosen_order} id ={optiondropdown3.id} value={optiondropdown3.name} placeholder=\"Alle Sets\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown4} onChange={this.handle_choosen_order} id ={optiondropdown4.id} value={optiondropdown4.name} placeholder=\"Alle Sets\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown5} onChange={this.handle_choosen_order} id ={optiondropdown5.id} value={optiondropdown5.name} placeholder=\"Alle Sets\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown6} onChange={this.handle_choosen_order} id ={optiondropdown6.id} value={optiondropdown6.name} placeholder=\"Alle Sets\" />\n                    </td>\n                </tr>\n            )})\n     }\n     renderTableOrderCat2(){\n       const optiondropdown1 = this.state.dropdownlist[0][1]\n       const optiondropdown2 = this.state.dropdownlist[1][1]\n       const optiondropdown3 = this.state.dropdownlist[2][1]\n       const optiondropdown4 = this.state.dropdownlist[3][1]\n       const optiondropdown5 = this.state.dropdownlist[4][1]\n       const optiondropdown6 = this.state.dropdownlist[5][1]\n       const coloumns = ['all'];\n       return coloumns.map((buttons, index) => {\n            return (\n                <tr key={'2Tabelle'}>\n                    <td>\n                    <Dropdown options={optiondropdown1} onChange={this.handle_choosen_order} id ={optiondropdown1.id} value={optiondropdown1.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown2} onChange={this.handle_choosen_order} id ={optiondropdown2.id} value={optiondropdown2.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown3} onChange={this.handle_choosen_order} id ={optiondropdown3.id} value={optiondropdown3.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown4} onChange={this.handle_choosen_order} id ={optiondropdown4.id} value={optiondropdown4.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown5} onChange={this.handle_choosen_order} id ={optiondropdown5.id} value={optiondropdown5.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown6} onChange={this.handle_choosen_order} id ={optiondropdown6.id} value={optiondropdown6.name} placeholder=\"Wähle ein freies Set aus\" />\n                    </td>\n                </tr>\n            )})\n     }\n\n     renderTableOrderCat3(){\n       const optiondropdown1 = this.state.dropdownlist[0][2]\n       const optiondropdown2 = this.state.dropdownlist[1][2]\n       const optiondropdown3 = this.state.dropdownlist[2][2]\n       const optiondropdown4 = this.state.dropdownlist[3][2]\n       const optiondropdown5 = this.state.dropdownlist[4][2]\n       const optiondropdown6 = this.state.dropdownlist[5][2]\n       const coloumns = ['all'];\n       return coloumns.map((buttons, index) => {\n            return (\n                <tr key={'3Tabelle32'}>\n                    <td>\n                    <Dropdown options={optiondropdown1} onChange={this.handle_choosen_order} id ={optiondropdown1.id} value={optiondropdown1.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown2} onChange={this.handle_choosen_order} id ={optiondropdown2.id} value={optiondropdown2.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown3} onChange={this.handle_choosen_order} id ={optiondropdown3.id} value={optiondropdown3.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown4} onChange={this.handle_choosen_order} id ={optiondropdown4.id} value={optiondropdown4.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown5} onChange={this.handle_choosen_order} id ={optiondropdown5.id} value={optiondropdown5.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                    <td>\n                    <Dropdown options={optiondropdown6} onChange={this.handle_choosen_order} id ={optiondropdown6.id} value={optiondropdown6.name} placeholder=\"Sets in Bearbeitung\" />\n                    </td>\n                </tr>\n            )})\n     }\n\n     renderTableData() {\n        console.log(this.state.setData)\n        return this.state.setData.map((setData, index) => {\n            return (\n                <tr key={'renderTabelle22'}>\n                    <td>\n                        <input id={setData.setid} placeholder={'Kategorie'} value={setData.cat} name={'cat'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'Unterkategorie'} value={setData.subcat}\n                               name={'subcat'} onChange={this.change_state_in_tabular_set}/>\n                        <input\n                            id={setData.setid} placeholder={'Setbezeichnung'} value={setData.description}\n                            name={'description'} onChange={this.change_state_in_tabular_set}/>\n                         <input id={setData.setid} placeholder={'Bearbeitungsvariante'}\n                           value={setData.variant} name ={'variant'} onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        {'automatisch erzeugt'}\n                        <input\n                            id={setData.setid} placeholder={'Datum und Uhrzeit'}\n                            value={setData.order_start} name={'order_start'} onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        <input id={setData.setid} placeholder={'Abholdauer'} value={setData.order_duration} name={'order_duration'}\n                               onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        <input\n                            id={setData.setid} placeholder={setData.status} value={setData.status}\n                            name={'status'} onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                </tr>\n            )\n        })\n    }\n    renderTableData2() {\n        console.log(this.state.setData)\n        return this.state.setData.map((setData, index) => {\n            return (\n                <tr key={'renderTabelle12'}>\n                    <td>\n                        <input id={setData.setid} placeholder={'Felgentemperatur'}\n                               value={setData.temp_air} name={'temp_air'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fl_id} placeholder={'Kaltdruck FL'} value={setData.fl_pressure}\n                               className={'pressure'} name={'fl_pressure'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fr_id} placeholder={'Kaltdruck FR'} value={setData.fr_pressure}\n                               className={'pressure'} name={'fr_pressure'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.bl_id} placeholder={'Kaltdruck BL'} value={setData.bl_pressure}\n                               className={'pressure'} name={'bl_pressure'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.br_id} placeholder={'Kaltdruck BR'} value={setData.br_pressure}\n                               className={'pressure'} name={'br_pressure'} onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        <input id={setData.setid} placeholder={'bleed initial'}\n                               value={setData.bleed_initial} name={'bleed_initial'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'bleed hot'} value={setData.bleed_hot}\n                               name={'bleed_hot'} onChange={this.change_state_in_tabular_set}/></td>\n                    <td onChange={this.change_state_in_tabular_set}>\n                        <input id={setData.setid} placeholder={'Heiztemperatur'} value={setData.temp_heat}\n                               name={'temp_heat'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'Heizdauer'} value={setData.heat_duration}\n                               name={'heat_duration'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'Heizstart'} value={setData.heat_start}\n                               name={'heat_start'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'Heizende'} value={setData.heat_end}\n                               name={'heat_end'} onChange={this.change_state_in_tabular_set}/></td>\n                    <td>\n                        <input id={setData.setid} placeholder={'Zeit der Messung'}\n                               value={setData.heat_press_timestamp} name={'heat_press_timestamp'}\n                               onChange={this.schange_state_in_tabular_set}/>\n                        <input id={setData.fl_id} placeholder={'Warmdruck FL'}\n                               value={setData.fl_hot_air_press} name={'fl_hot_air_press'} className={'hot_air_press'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fr_id} placeholder={'Warmdruck FR'}\n                               value={setData.fr_hot_air_press} name={'fr_hot_air_press'} className={'hot_air_press'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.bl_id} placeholder={'Warmdruck BL'}\n                               value={setData.bl_hot_air_press} name={'bl_hot_air_press'} className={'hot_air_press'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.br_id} placeholder={'Warmdruck BR'}\n                               value={setData.br_hot_air_press} name={'br_hot_air_press'} className={'hot_air_press'}\n                               onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        <input id={setData.setid} placeholder={'Target vorne'}\n                               value={setData.heat_press_front} name={'heat_press_front'}\n                               onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.setid} placeholder={'Target hinten'}\n                               value={setData.heat_press_back} name={'heat_press_back'}\n                               onChange={this.change_state_in_tabular_set}/>\n                    </td>\n                    <td>\n                        <input id={setData.setid} placeholder={'nicht gebleedet'} value={setData.gebleeded}\n                               name={'gebleeded'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fl_id} placeholder={'Bleed FL'} value={setData.fl_bleed_press}\n                               className={'bleed_press'} name={'fl_bleed_press'}  onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fr_id} placeholder={'Bleed FR'} value={setData.fr_bleed_press}\n                               className={'bleed_press'} name={'fr_bleed_press'}  onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.bl_id} placeholder={'Bleed BL'} value={setData.bl_bleed_press}\n                               className={'bleed_press'} name={'bl_bleed_press'}  onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.br_id} placeholder={'Bleed BR'} value={setData.br_bleed_press}\n                               className={'bleed_press'} name={'br_bleed_press'} onChange={this.change_state_in_tabular_set}/>\n                    </td>\n\n                    <td>\n                        <input id={setData.fl_id} placeholder={'ID FL'} value={setData.fl_id_scan}\n                               className={'id_scan'} name={'fl_id_scan'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.fr_id} placeholder={'ID FR'} value={setData.fr_id_scan}\n                               className={'id_scan'} name={'fr_id_scan'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.bl_id} placeholder={'ID BL'} value={setData.bl_id_scan}\n                               className={'id_scan'} name={'bl_id_scan'} onChange={this.change_state_in_tabular_set}/>\n                        <input id={setData.br_id} placeholder={'ID BR'} value={setData.br_id_scan}\n                               className={'id_scan'} name={'br_id_scan'}  onChange={this.change_state_in_tabular_set}/></td>\n                </tr>\n            )\n        })\n    }\n\n\n\n        render() {\n        return (\n              <View style={{overflowY: 'scroll', flex: 1, backgroundColor: '#2e3742'}}>\n         <nav className=\"navbar navbar-light\" style={{backgroundColor: '#d0d7de'}}>\n                    <div className=\"container-fluid\">\n                        <a className=\"navbar-brand\" href=\"#\">  <img src={image} style={{width: '70%'}}/> </a>\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                                data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                                aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeRace}>Hauptmenü </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewRace}>Neue Renndaten anlegen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeShowRace}>Renndaten anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeAstrid}>Berechnung Reifendruck </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeWheel}>Reifendetails anzeigen</button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeHelper}>Wetterdaten erfassen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeWeather}>Wetterdaten anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeMaen}>Statistiken anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewFormel}>Formel Reifendruck anlegen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewUser}>Neues Mitglied anlegen </button>\n                                </li>\n                                <br/>\n                                <li className=\"nav-item\">\n                                    <button className=\"btn btn-primary btn-sm\" aria-current=\"page\" onClick={this.changeLogout}>Ausloggen </button>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n               <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n               <br/>\n               <h1 className=\"display-4\" style={{color: '#d0d7de', textAlign: 'center'}} >Reifenbestellungen verwalten</h1>\n               <br/>\n                <br/>\n                <div>\n                    <h3 className=\"display-6\" id='title' style={{color: '#d0d7de', textAlign: 'center'}} >Neue Reifenbestellung anlegen</h3>\n                    <table id='order' className=\"table table-striped table-hover table-bordered\"\n                          style={{backgroundColor: '#d0d7de', verticalAlign: 'middle'}}>\n                        <tbody>\n                        {this.renderTableHeader(1)}\n                        {this.renderTableOrderCat1()}\n                        {this.renderTableOrderCat2()}\n                        {this.renderTableOrderCat3()}\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                <br/>\n                <br/>\n                    <h3 className=\"display-6\" id='title' style={{color: '#d0d7de', textAlign: 'center'}} >Ausgewähltes Reifenset bearbeiten</h3>\n                    <table id='choosen' className=\"table table-striped table-hover table-bordered\"\n                          style={{backgroundColor: '#d0d7de', verticalAlign: 'middle', width: 500}}>\n                        <tbody>\n                        {this.renderTableHeader(2)}\n                        {this.renderTableData()}\n                        </tbody>\n                    </table>\n                    <table id='choosen2' className=\"table table-striped table-hover table-bordered\"\n                          style={{backgroundColor: '#d0d7de', verticalAlign: 'middle', width: 500}}>\n                    <tbody>\n                      {this.renderTableHeader(3)}\n                      {this.renderTableData2()}\n                    </tbody>\n                    </table>\n                </div>\n               </div>\n                <br/>\n                <button type='button' className='btn btn-primary' onClick={this.save_order}\n                        style={{marginLeft: 'auto', marginRight: 'auto'}}> BESTELLUNG ABSCHICKEN\n                </button>\n                <br/>\n                <button type='button' className='btn btn-primary' onClick={this.changeRace}\n                        style={{marginLeft: 'auto', marginRight: 'auto'}}> ZURÜCK\n                </button>\n                <br/>\n                <br/>\n              </View>\n        );\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NewOrder.js b/NewOrder.js
--- a/NewOrder.js	(revision a831a65d638ccd91b65d9f67cc6f930484ed603b)
+++ b/NewOrder.js	(date 1643897327152)
@@ -113,7 +113,6 @@
         })
     };
 
-
     handle_choosen_order = event =>{
         console.log(event)
         let copyArray = []
Index: .expo/packager-info.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"devToolsPort\": 19002,\n  \"expoServerPort\": null,\n  \"packagerPort\": 19000,\n  \"webpackServerPort\": 19006,\n  \"packagerPid\": null,\n  \"expoServerNgrokUrl\": null,\n  \"packagerNgrokUrl\": null,\n  \"ngrokPid\": null\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.expo/packager-info.json b/.expo/packager-info.json
--- a/.expo/packager-info.json	(revision a831a65d638ccd91b65d9f67cc6f930484ed603b)
+++ b/.expo/packager-info.json	(date 1643897585655)
@@ -1,6 +1,6 @@
 {
   "devToolsPort": 19002,
-  "expoServerPort": null,
+  "expoServerPort": 19000,
   "packagerPort": 19000,
   "webpackServerPort": 19006,
   "packagerPid": null,
Index: RaceScreen.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Image,\n    TextInput,\n    TouchableHighlight,\n    SectionList,\n    TouchableOpacity\n} from 'react-native';\n\nimport {getRaceList, timeoutPromise, getWeatherTab} from \"./tools\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport {Button} from \"react-native-web\";\nimport {getWheelSetInformation} from \"./tools_get_wheels\"\nimport { logToConsole } from \"react-native/Libraries/Utilities/RCTLog\";\nimport image from \"./images/logo.png\";\nimport image7 from \"./images/autoblau.jpg\";\nimport image3 from \"./images/autoblau2.jpg\";\nimport image4 from \"./images/autogelb.jpg\";\nimport image8 from \"./images/autogelb2.jpg\";\nimport image9 from \"./images/autoweiß.jpg\";\nimport image5 from \"./images/autoweiß2.jpg\";\nimport image11 from \"./images/happy.jpg\";\nimport image14 from \"./images/race.jpg\";\nimport image10 from \"./images/race2.jpg\";\nimport image12 from \"./images/sieg.jpg\";\nimport image13 from \"./images/team.jpg\";\nimport image6 from \"./images/team2.jpg\";\nimport image2 from \"./images/team3.jpg\";\n\n\nexport default class RaceScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataRace: [],\n            dataWeather:[],\n            raceID : false,\n            raceList:[],\n\n            ReturnedWheelInformations:[],\n\n            timeWeather: 0,\n            timeOrder: 0,\n            timeHeating: 0,\n\n            timeWeatherG: '00:00:00',\n            timeOrderG: '00:00:00',\n            timeHeatingG: '00:00:00',\n        }\n\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    startTimer() {\n        if (this.timer == 0) {\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n\n    countDown() {\n        let secondsWeather = this.state.timeWeather-1;\n        let secondsOrder = this.state.timeOrder-1;\n        let secondsHeating = this.state.timeHeating-1;\n\n        if(secondsWeather < 0) {secondsWeather+=1}\n        if(secondsOrder < 0) {secondsOrder+=1}\n        if(secondsHeating < 0) {secondsHeating+=1}\n\n        this.setState({\n\n            timeWeather: secondsWeather,\n            timeWeatherG: this.secondsToTime(secondsWeather),\n            timeOrder: secondsOrder,\n            timeOrderG: this.secondsToTime(secondsOrder),\n            timeHeating: secondsHeating,\n            timeHeatingG: this.secondsToTime(secondsHeating),\n\n            });\n    }\n\n    secondsToTime(secs){\n\n        if(secs <= 0) {return '00:00:00'}\n\n        let hours = Math.floor(secs / (60 * 60));\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n\n        if(hours.toString().length == 1) {hours = `0${hours}`}\n        if(minutes.toString().length == 1) {minutes = `0${minutes}`}\n        if(seconds.toString().length == 1) {seconds = `0${seconds}`}\n\n        let obj = `${hours}:${minutes}:${seconds}`;\n        return obj\n    }\n\n    compute_Order_Heating_TimerSeconds(tmp, duration) {\n        let tmpInSeconds = (new Date(Date.parse(tmp)).getTime() / 1000)\n        let nowDate = (new Date().getTime() / 1000)\n        let result = Math.floor(tmpInSeconds - nowDate)\n\n        if(result <= 0) {return 0}\n        return Math.floor(tmpInSeconds - nowDate)\n    }\n\n    getSecondsToNextMeasurement(ttemp) {\n\n        if(ttemp == null) {\n            return;\n        }\n        let lastDate = (new Date(Date.parse(ttemp.datetime)).getTime() / 1000)\n        let nowDate = (new Date().getTime() / 1000)\n        let result = 1800 - Math.floor(nowDate - lastDate)\n\n        if(result > 0) {\n            this.setState({timeWeather: result})\n        }\n    }\n\n    async getWeatherData(raceID){\n       const accesstoken = await AsyncStorage.getItem('accesstoken');\n       getWeatherTab(accesstoken, raceID).then(DataTabular => {\n                this.setState({dataWeather: DataTabular});\n                this.getSecondsToNextMeasurement(this.state.dataWeather[this.state.dataWeather.length-1])\n\n            }).catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    async componentDidMount() {\n        const accesstoken = await AsyncStorage.getItem('accesstoken');\n        const raceid = await AsyncStorage.getItem('raceID');\n        this.setState({raceID: raceid});\n       if(raceid!=null) {\n           getRaceList(accesstoken).then(racelistDropdown => {\n               let raceList = racelistDropdown;\n               let liste = raceList.filter(entry => entry.id == raceid);\n               let name = liste[0].name;\n               var raceListfiltered = raceList.filter(function (value, index, arr) {\n                   return value.id != raceid;\n               });\n               raceListfiltered.unshift({'name': name, 'id': raceid});\n               this.setState({raceList: raceListfiltered});\n               this.setState({raceID: raceid});\n               this.getWeatherData(this.state.raceID);\n               this.getWheelSetInformation(this.state.raceID);\n               this.startTimer();\n           }).catch(function (error) {\n               console.log(error);\n           });\n       }\n       else {\n           getRaceList(accesstoken).then(racelistDropdown => {\n               this.setState({raceList: racelistDropdown});\n               this.setState({raceID: this.state.raceList[0].id})\n\n               this.getWeatherData(this.state.raceID)\n               this.getWheelSetInformation(this.state.raceID)\n               this.startTimer()\n               AsyncStorage.setItem(\"raceID\",this.state.raceList[0].id);\n\n           }).catch(function (error) {\n               console.log(error);\n           })\n       }\n\n    }\n\n    async getWheelSetInformation(raceID){\n       const accesstoken = await AsyncStorage.getItem('accesstoken');\n       getWheelSetInformation(accesstoken, raceID).then(DataTabular => {\n            this.setState({ReturnedWheelInformations: DataTabular});\n\n\n            var orderStart;\n            var orderDuration;\n            var heatStart;\n            var heatDuration;\n\n            Object.keys(DataTabular).forEach((key) => {\n                if(key = 'order_start') {orderStart = DataTabular[key]}\n                if(key = 'order_duration') {orderDuration = DataTabular[key]}\n                if(key = 'heat_start') {heatStart = DataTabular[key]}\n                if(key = 'heat_duration') {heatDuration = DataTabular[key]}\n            });\n\n            //heatStart = '27 Jan 2022 20:40:56 GMT'\n            //heatDuration = 1800\n\n            //orderStart = '27 Jan 2022 20:37:46 GMT'\n            //orderDuration = 1800\n\n            if(orderStart != null && orderDuration != null) {\n                this.setState({\n                    timeOrder: this.compute_Order_Heating_TimerSeconds(orderStart, orderDuration)\n                });\n            }\n\n            if(heatStart != null && heatDuration != null) {\n                this.setState({\n                    timeHeating: this.compute_Order_Heating_TimerSeconds(heatStart, heatDuration)\n                });\n            }\n\n        }).catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    changeLogout = event => {\n        event.preventDefault();\n        this.props.navigation.replace('Logout');\n    }\n\n    changeNewRace = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewRace');\n    }\n\n     changeNewUser = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewUser');\n    }\n\n     changeHelper = event => {\n        event.preventDefault();\n        this.props.navigation.push('Helper');\n    }\n\n    changeNewOrder = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewOrder');\n    }\n\n\n    changeWeather = event => {\n        event.preventDefault();\n        this.props.navigation.push('Weather');\n    }\n\n    changeShowRace = event => {\n        event.preventDefault();\n        this.props.navigation.push('ShowRace');\n    }\n\n     changeWheel = event => {\n        event.preventDefault();\n        this.props.navigation.push('Wheel');\n    }\n\n    changeNewFormel = event => {\n        event.preventDefault();\n        this.props.navigation.push('NewFormel');\n    }\n\n    changeAstrid = event => {\n        event.preventDefault();\n        this.props.navigation.push('Astrid');\n    }\n\n    changeMaen = event => {\n        event.preventDefault();\n        this.props.navigation.push('Maen');\n    }\n\n    async saveRaceIDinState() {\n        const id = await AsyncStorage.getItem(\"raceID\");\n        clearInterval(this.timer);\n        this.timer = 0;\n        this.setState({\n            timeWeather: 0,\n            timeWeatherG: '00:00:00',\n            timeHeating: 0,\n            timeHeatingG: '00:00:00',\n            timeOrder: 0,\n            timeOrderG: '00:00:00',\n        });\n        this.setState({raceID: id});\n        this.getWeatherData(id);\n        this.getWheelSetInformation(id);\n        this.startTimer();\n    }\n\n    getRaceID = event => {\n        const id = event.target.value;\n        AsyncStorage.setItem(\"raceID\",event.target.value);\n        this.saveRaceIDinState();\n    }\n\n    render() {\n        let optionTemplate = this.state.raceList.map(v => (\n            <option value={v.id} key={v.id}>{v.name}</option>\n        ));\n\n        return (\n            <View style={{overflowY: 'scroll', flex: 1, backgroundColor: '#2e3742'}}>\n            <nav className=\"navbar navbar-light\" style={{backgroundColor: '#d0d7de'}}>\n                    <div className=\"container-fluid\">\n                        <a className=\"navbar-brand\" href=\"#\"> <img src={image} style={{width: '70%'}}/> </a>\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                                data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                                aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"></span>\n                        </button>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewRace}>Neue Renndaten anlegen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeShowRace}>Renndaten anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewOrder}>Reifenbestellungen verwalten </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeAstrid}>Berechnung Reifendruck </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeWheel}>Reifendetails anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeHelper}> Wetterdaten erfassen</button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeWeather}>Wetterdaten anzeigen </button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeMaen}>Statistiken anzeigen</button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewFormel}>Formel Reifendruck anlegen</button>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button style={{backgroundColor: '#d0d7de'}} className=\"btn btn-sm\" aria-current=\"page\" onClick={this.changeNewUser}>Neues Mitglied anlegen </button>\n                                </li>\n                                <br/>\n                                <li className=\"nav-item\">\n                                    <button className=\"btn btn-primary btn-sm\" aria-current=\"page\" onClick={this.changeLogout}>Ausloggen </button>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n            <div className='container' style={{marginLeft: 'auto', marginRight: 'auto'}}>\n            <br/>\n            <h1 className=\"display-4\" style={{color: '#d0d7de', textAlign: 'center', marginLeft: 'auto', marginRight: 'auto'}}> Reifenmanagement </h1>\n            </div>\n            <br/>\n            <div className='input-group' style={{marginLeft: 'auto', marginRight: 'auto'}}>\n            <label className='input-group-text' style={{backgroundColor: '#d0d7de', marginLeft: 'auto', marginRight: 'auto'}}> Rennen auswählen: &nbsp; <select\n                        id='option' value={this.state.id} onChange={this.getRaceID}>\n                  {optionTemplate}\n            </select>\n            </label>\n            </div>\n            <br/>\n            <br/>\n            <div className='alert alert-secondary' role='alert' style={{backgroundColor: '#d0d7de', width: 600, marginLeft: 'auto', marginRight: 'auto'}}>\n            <h4> Wetterdaten messen in: {this.state.timeWeatherG} </h4>\n                <hr/>\n            <h4>Reifenset wird noch beheizt für: {this.state.timeHeatingG} </h4>\n                <hr/>\n            <h4>Reifen zur Abholung bereit in: {this.state.timeOrderG}</h4>\n            </div>\n            <br/>\n            <br/>\n                <div id=\"slideshow\" className=\"carousel slide\" data-bs-ride=\"carousel\" style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                    <div className=\"carousel-inner\">\n                        <div className=\"carousel-item active\">\n                            <img className=\"d-block w-50\" src={image2} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image3} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image4} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image5} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image6} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image7} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image8} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image9} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image10} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image11} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image12} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image13} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                        <div className=\"carousel-item\">\n                            <img className=\"d-block w-50\" src={image14} style={{marginLeft: 'auto', marginRight: 'auto'}}/>\n                        </div>\n                    </div>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                    <button className=\"carousel-control-prev\" href=\"#slideshow\"\n                       data-bs-slide=\"prev\" style={{width: '45%'}}>\n                        <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n\n                    </button>\n                    <button className=\"carousel-control-next\" href=\"#slideshow\" role=\"button\"\n                       data-bs-slide=\"next\" style={{width: '45%'}}>\n                        <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n\n                    </button>\n                    </div>\n                </div>\n                <br/>\n                <br/>\n            </View>\n        );\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RaceScreen.js b/RaceScreen.js
--- a/RaceScreen.js	(revision a831a65d638ccd91b65d9f67cc6f930484ed603b)
+++ b/RaceScreen.js	(date 1643897327184)
@@ -130,7 +130,6 @@
        getWeatherTab(accesstoken, raceID).then(DataTabular => {
                 this.setState({dataWeather: DataTabular});
                 this.getSecondsToNextMeasurement(this.state.dataWeather[this.state.dataWeather.length-1])
-
             }).catch(function (error) {
                 console.log(error);
             })
@@ -180,7 +179,6 @@
        getWheelSetInformation(accesstoken, raceID).then(DataTabular => {
             this.setState({ReturnedWheelInformations: DataTabular});
 
-
             var orderStart;
             var orderDuration;
             var heatStart;
